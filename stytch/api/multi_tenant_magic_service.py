# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

from typing import Any, Dict, Optional


from stytch.core.api_base import ApiBase
from stytch.core.http.client import AsyncClient, SyncClient
from stytch.models.multi_tenant_magic_service import (
    MultitenantmagiclinksemailloginorsignupResponse,
    MultitenantmagiclinksemailinviteResponse,
    MultitenantmagiclinksauthenticateResponse,
)


class MultiTenantMagicService:
    def __init__(
        self,
        api_base: ApiBase,
        sync_client: SyncClient,
        async_client: AsyncClient,
    ) -> None:
        self.api_base = api_base
        self.sync_client = sync_client
        self.async_client = async_client

    @property
    def sub_url(self) -> str:
        return "multi_tenant_magic_service"

    def MultiTenantMagicLinksEmailLoginOrSignup(
        self,
        organization_id: str,
        email_address: str,
        create_user_as_pending: bool,
        login_redirect_url: Optional[str] = None,
        signup_redirect_url: Optional[str] = None,
        pkce_code_challenge: Optional[str] = None,
        login_template_id: Optional[str] = None,
        signup_template_id: Optional[str] = None,
    ) -> MultitenantmagiclinksemailloginorsignupResponse:
        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "email_address": email_address,
            "create_user_as_pending": create_user_as_pending,
        }

        if login_redirect_url is not None:
            payload["login_redirect_url"] = login_redirect_url
        if signup_redirect_url is not None:
            payload["signup_redirect_url"] = signup_redirect_url
        if pkce_code_challenge is not None:
            payload["pkce_code_challenge"] = pkce_code_challenge
        if login_template_id is not None:
            payload["login_template_id"] = login_template_id
        if signup_template_id is not None:
            payload["signup_template_id"] = signup_template_id

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/b2b/magic_links/email/login_or_signup"
        )

        res = self.sync_client.post(url, json=payload)
        return MultitenantmagiclinksemailloginorsignupResponse.from_json(
            res.response.status_code, res.json
        )

    async def MultiTenantMagicLinksEmailLoginOrSignup_async(
        self,
        organization_id: str,
        email_address: str,
        create_user_as_pending: bool,
        login_redirect_url: Optional[str] = None,
        signup_redirect_url: Optional[str] = None,
        pkce_code_challenge: Optional[str] = None,
        login_template_id: Optional[str] = None,
        signup_template_id: Optional[str] = None,
    ) -> MultitenantmagiclinksemailloginorsignupResponse:
        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "email_address": email_address,
            "create_user_as_pending": create_user_as_pending,
        }

        if login_redirect_url is not None:
            payload["login_redirect_url"] = login_redirect_url
        if signup_redirect_url is not None:
            payload["signup_redirect_url"] = signup_redirect_url
        if pkce_code_challenge is not None:
            payload["pkce_code_challenge"] = pkce_code_challenge
        if login_template_id is not None:
            payload["login_template_id"] = login_template_id
        if signup_template_id is not None:
            payload["signup_template_id"] = signup_template_id

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/b2b/magic_links/email/login_or_signup"
        )

        res = await self.async_client.post(url, json=payload)
        return MultitenantmagiclinksemailloginorsignupResponse.from_json(
            res.response.status, res.json
        )

    def MultiTenantMagicLinksEmailInvite(
        self,
        organization_id: str,
        email_address: str,
        invite_redirect_url: Optional[str] = None,
        invited_by_member_id: Optional[str] = None,
        name: Optional[str] = None,
        trusted_metadata: Optional[Dict[str, str]] = None,
        untrusted_metadata: Optional[Dict[str, str]] = None,
        invite_template_id: Optional[str] = None,
    ) -> MultitenantmagiclinksemailinviteResponse:
        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "email_address": email_address,
        }

        if invite_redirect_url is not None:
            payload["invite_redirect_url"] = invite_redirect_url
        if invited_by_member_id is not None:
            payload["invited_by_member_id"] = invited_by_member_id
        if name is not None:
            payload["name"] = name
        if trusted_metadata is not None:
            payload["trusted_metadata"] = trusted_metadata
        if untrusted_metadata is not None:
            payload["untrusted_metadata"] = untrusted_metadata
        if invite_template_id is not None:
            payload["invite_template_id"] = invite_template_id

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/b2b/magic_links/email/invite"
        )

        res = self.sync_client.post(url, json=payload)
        return MultitenantmagiclinksemailinviteResponse.from_json(
            res.response.status_code, res.json
        )

    async def MultiTenantMagicLinksEmailInvite_async(
        self,
        organization_id: str,
        email_address: str,
        invite_redirect_url: Optional[str] = None,
        invited_by_member_id: Optional[str] = None,
        name: Optional[str] = None,
        trusted_metadata: Optional[Dict[str, str]] = None,
        untrusted_metadata: Optional[Dict[str, str]] = None,
        invite_template_id: Optional[str] = None,
    ) -> MultitenantmagiclinksemailinviteResponse:
        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "email_address": email_address,
        }

        if invite_redirect_url is not None:
            payload["invite_redirect_url"] = invite_redirect_url
        if invited_by_member_id is not None:
            payload["invited_by_member_id"] = invited_by_member_id
        if name is not None:
            payload["name"] = name
        if trusted_metadata is not None:
            payload["trusted_metadata"] = trusted_metadata
        if untrusted_metadata is not None:
            payload["untrusted_metadata"] = untrusted_metadata
        if invite_template_id is not None:
            payload["invite_template_id"] = invite_template_id

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/b2b/magic_links/email/invite"
        )

        res = await self.async_client.post(url, json=payload)
        return MultitenantmagiclinksemailinviteResponse.from_json(
            res.response.status, res.json
        )

    def MultiTenantMagicLinksAuthenticate(
        self,
        magic_links_token: str,
        pkce_code_verifier: Optional[str] = None,
        session_token: Optional[str] = None,
        session_jwt: Optional[str] = None,
        session_duration_minutes: Optional[int] = None,
        session_custom_claims: Optional[Dict[str, str]] = None,
    ) -> MultitenantmagiclinksauthenticateResponse:
        payload: Dict[str, Any] = {
            "magic_links_token": magic_links_token,
        }

        if pkce_code_verifier is not None:
            payload["pkce_code_verifier"] = pkce_code_verifier
        if session_token is not None:
            payload["session_token"] = session_token
        if session_jwt is not None:
            payload["session_jwt"] = session_jwt
        if session_duration_minutes is not None:
            payload["session_duration_minutes"] = session_duration_minutes
        if session_custom_claims is not None:
            payload["session_custom_claims"] = session_custom_claims

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/b2b/magic_links/authenticate"
        )

        res = self.sync_client.post(url, json=payload)
        return MultitenantmagiclinksauthenticateResponse.from_json(
            res.response.status_code, res.json
        )

    async def MultiTenantMagicLinksAuthenticate_async(
        self,
        magic_links_token: str,
        pkce_code_verifier: Optional[str] = None,
        session_token: Optional[str] = None,
        session_jwt: Optional[str] = None,
        session_duration_minutes: Optional[int] = None,
        session_custom_claims: Optional[Dict[str, str]] = None,
    ) -> MultitenantmagiclinksauthenticateResponse:
        payload: Dict[str, Any] = {
            "magic_links_token": magic_links_token,
        }

        if pkce_code_verifier is not None:
            payload["pkce_code_verifier"] = pkce_code_verifier
        if session_token is not None:
            payload["session_token"] = session_token
        if session_jwt is not None:
            payload["session_jwt"] = session_jwt
        if session_duration_minutes is not None:
            payload["session_duration_minutes"] = session_duration_minutes
        if session_custom_claims is not None:
            payload["session_custom_claims"] = session_custom_claims

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/b2b/magic_links/authenticate"
        )

        res = await self.async_client.post(url, json=payload)
        return MultitenantmagiclinksauthenticateResponse.from_json(
            res.response.status, res.json
        )
